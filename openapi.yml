openapi: 3.0.1
info:
  title: Courier
  version: '1.0.0'
paths:
  /send:
    post:
      description: Use the send API to send a message to one or more recipients.
      operationId: send
      tags:
        - ''
      parameters:
        - name: Idempotency-Key
          in: header
          required: false
          schema:
            type: string
            nullable: true
        - name: x-idempotency-expiration
          in: header
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
      summary: Send a message
      security: &ref_0
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  $ref: '#/components/schemas/Message'
                  description: Defines the message to be delivered
              required:
                - message
  /audiences/{audience_id}:
    get:
      description: Returns the specified audience by id.
      operationId: audiences_get
      tags:
        - Audiences
      parameters:
        - name: audience_id
          in: path
          description: A unique identifier representing the audience_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
      summary: Get an audience
      security: *ref_0
    put:
      description: Creates or updates audience.
      operationId: audiences_update
      tags:
        - Audiences
      parameters:
        - name: audience_id
          in: path
          description: A unique identifier representing the audience id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
      summary: Update an audience
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudienceRequest'
    delete:
      description: Deletes the specified recipient Profile.
      operationId: audiences_delete
      tags:
        - Audiences
      parameters:
        - name: audience_id
          in: path
          description: A unique identifier representing the audience id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
      summary: Delete an audience
      security: *ref_0
  /audiences/{audience_id}/members:
    get:
      description: Get list of members of an audience.
      operationId: audiences_listMembers
      tags:
        - Audiences
      parameters:
        - name: audience_id
          in: path
          description: A unique identifier representing the audience id
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          description: |
            A unique identifier that allows for fetching the next set of members
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IAudienceMemberListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: List audience members
      security: *ref_0
  /audiences:
    get:
      description: Get the audiences associated with the authorization token.
      operationId: audiences_listAudiences
      tags:
        - Audiences
      parameters:
        - name: cursor
          in: query
          description: >
            A unique identifier that allows for fetching the next set of
            audiences
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IAudienceListResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: List all audiences
      security: *ref_0
  /audit-events:
    get:
      description: Fetch the list of audit events
      operationId: auditEvents_list
      tags:
        - AuditEvents
      parameters:
        - name: cursor
          in: query
          description: >
            A unique identifier that allows for fetching the next set of audit
            events.  
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierListAuditEventsResponse'
      summary: Get all audit events
      security: *ref_0
  /audit-events/{audit-event-id}:
    get:
      description: Fetch a specific audit event by ID.
      operationId: auditEvents_get
      tags:
        - AuditEvents
      parameters:
        - name: audit-event-id
          in: path
          description: >-
            A unique identifier associated with the audit event you wish to
            retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IAuditEvent'
      summary: Get an audit event
      security: *ref_0
  /auth/issue-token:
    post:
      description: Returns a new access token.
      operationId: authTokens_issueToken
      tags:
        - AuthTokens
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierAuthIssueTokenResponse'
      summary: Create an auth token
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierAuthIssueTokenParameters'
  /automations/{templateId}/invoke:
    post:
      description: Invoke an automation run from an automation template.
      operationId: automations_invokeAutomationTemplate
      tags:
        - Automations
      parameters:
        - name: templateId
          in: path
          description: >-
            A unique identifier representing the automation template to be
            invoked. This could be the Automation Template ID or the Automation
            Template Alias.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
      summary: Invoke an Automation
      security: *ref_0
  /automations/invoke:
    post:
      description: >-
        Invoke an ad hoc automation run. This endpoint accepts a JSON payload
        with a series of automation steps. For information about what steps are
        available, checkout the ad hoc automation guide
        [here](https://www.courier.com/docs/automations/steps/).
      operationId: automations_invokeAdHocAutomation
      tags:
        - Automations
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierAutomationInvokeResponse'
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierAutomationAdHocInvokeParams'
  /brands:
    post:
      operationId: brands_create
      tags:
        - Brands
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierBrand'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '402':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRequired'
        '409':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlreadyExists'
      summary: Create a new brand
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierBrandParameters'
    get:
      description: Get the list of brands.
      operationId: brands_list
      tags:
        - Brands
      parameters:
        - name: cursor
          in: query
          description: A unique identifier that allows for fetching the next set of brands.
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierBrandsResponse'
      summary: List brands
      security: *ref_0
  /brands/{brand_id}:
    get:
      description: Fetch a specific brand by brand ID.
      operationId: brands_get
      tags:
        - Brands
      parameters:
        - name: brand_id
          in: path
          description: A unique identifier associated with the brand you wish to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierBrand'
      summary: Get a brand
      security: *ref_0
    delete:
      description: Delete a brand by brand ID.
      operationId: brands_delete
      tags:
        - Brands
      parameters:
        - name: brand_id
          in: path
          description: A unique identifier associated with the brand you wish to retrieve.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
        '409':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
      summary: Delete a brand
      security: *ref_0
  /bulk:
    post:
      operationId: bulk_create
      tags:
        - Bulk
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierBulkCreateJobResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Create a bulk job
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierBulkCreateJobParams'
  /bulk/{job_id}:
    post:
      description: Ingest user data into a Bulk Job
      operationId: bulk_ingestUsers
      tags:
        - Bulk
      parameters:
        - name: job_id
          in: path
          description: A unique identifier representing the bulk job
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
      summary: Add users
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierBulkIngestUsersParams'
  /bulk/{job_id}/run:
    post:
      description: Run a bulk job
      operationId: bulk_runJob
      tags:
        - Bulk
      parameters:
        - name: job_id
          in: path
          description: A unique identifier representing the bulk job
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Run a job
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierBulkRunJobParams'
    get:
      description: Get a bulk job
      operationId: bulk_getJob
      tags:
        - Bulk
      parameters:
        - name: job_id
          in: path
          description: A unique identifier representing the bulk job
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierBulkGetJobResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get a Job
      security: *ref_0
  /bulk/{job_id}/users:
    get:
      description: Get Bulk Job Users
      operationId: bulk_getUsers
      tags:
        - Bulk
      parameters:
        - name: job_id
          in: path
          description: A unique identifier representing the bulk job
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierBulkGetJobUsersResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get users
      security: *ref_0
  /lists:
    get:
      description: Returns all of the lists, with the ability to filter based on a pattern.
      operationId: lists_list
      tags:
        - Lists
      parameters:
        - name: cursor
          in: query
          description: A unique identifier that allows for fetching the next page of lists.
          required: false
          schema:
            type: string
            nullable: true
        - name: pattern
          in: query
          description: >
            "A pattern used to filter the list items returned. Pattern types
            supported: exact match on `list_id` or a pattern of one or more
            pattern parts. you may replace a part with either: `*` to match all
            parts in that position, or `**` to signify a wildcard `endsWith`
            pattern match."
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierListGetAllResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get all lists
      security: *ref_0
  /lists/{list_id}:
    get:
      description: Returns a list based on the list ID provided.
      operationId: lists_get
      tags:
        - Lists
      parameters:
        - name: list_id
          in: path
          description: A unique identifier representing the list you wish to retrieve.
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          description: A unique identifier that allows for fetching the next page of lists.
          required: false
          schema:
            type: string
            nullable: true
        - name: pattern
          in: query
          description: >
            "A pattern used to filter the list items returned. Pattern types
            supported: exact match on `list_id` or a pattern of one or more
            pattern parts. you may replace a part with either: `*` to match all
            parts in that position, or `**` to signify a wildcard `endsWith`
            pattern match."
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierList'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      summary: Get a list
      security: *ref_0
    put:
      description: Create or replace an existing list with the supplied values.
      operationId: lists_update
      tags:
        - Lists
      parameters:
        - name: list_id
          in: path
          description: A unique identifier representing the list you wish to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierList'
      summary: Update a list
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierListPutParams'
  /lists/{list_id}/subscriptions:
    get:
      description: Get the list's subscriptions.
      operationId: lists_getSubscriptions
      tags:
        - Lists
      parameters:
        - name: list_id
          in: path
          description: A unique identifier representing the list you wish to retrieve.
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          description: >-
            A unique identifier that allows for fetching the next set of list
            subscriptions
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierListGetSubscriptionsResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      summary: Get the subscriptions for a list
      security: *ref_0
    put:
      description: >-
        Subscribes the users to the list, overwriting existing subscriptions. If
        the list does not exist, it will be automatically created.
      operationId: lists_putSubscriptions
      tags:
        - Lists
      parameters:
        - name: list_id
          in: path
          description: A unique identifier representing the list you wish to retrieve.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Subscribe users to a list
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ICourierPutSubscriptionsRecipient'
    post:
      description: >-
        Subscribes additional users to the list, without modifying existing
        subscriptions. If the list does not exist, it will be automatically
        created.
      operationId: lists_postSubscriptions
      tags:
        - Lists
      parameters:
        - name: list_id
          in: path
          description: A unique identifier representing the list you wish to retrieve.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Add subscribers to a list
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ICourierPutSubscriptionsRecipient'
  /lists/{list_id}/subscriptions/{user_id}:
    put:
      description: >-
        Subscribe a user to an existing list (note: if the List does not exist,
        it will be automatically created).
      operationId: lists_subscribe
      tags:
        - Lists
      parameters:
        - name: list_id
          in: path
          description: A unique identifier representing the list you wish to retrieve.
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          description: >-
            A unique identifier representing the recipient associated with the
            list
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
      summary: Subscribe a single user to a list
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listId:
                  type: string
                recipientId:
                  type: string
                preferences:
                  $ref: '#/components/schemas/ICourierRecipientPreferences'
                  nullable: true
              required:
                - listId
                - recipientId
    delete:
      description: Delete a subscription to a list by list ID and user ID.
      operationId: lists_unsubscribe
      tags:
        - Lists
      parameters:
        - name: list_id
          in: path
          description: A unique identifier representing the list you wish to retrieve.
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          description: >-
            A unique identifier representing the recipient associated with the
            list
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
      summary: Unsubscribe a user from a list
      security: *ref_0
  /messages:
    get:
      description: Fetch the statuses of messages you've previously sent.
      operationId: messages_list
      tags:
        - Messages
      parameters:
        - name: archived
          in: query
          description: >-
            A boolean value that indicates whether archived messages should be
            included in the response.
          required: false
          schema:
            type: boolean
            nullable: true
        - name: cursor
          in: query
          description: >-
            A unique identifier that allows for fetching the next set of message
            statuses.
          required: false
          schema:
            type: string
            nullable: true
        - name: event
          in: query
          description: >-
            A unique identifier representing the event that was used to send the
            event.
          required: false
          schema:
            type: string
            nullable: true
        - name: list
          in: query
          description: A unique identifier representing the list the message was sent to.
          required: false
          schema:
            type: string
            nullable: true
        - name: messageId
          in: query
          description: >-
            A unique identifier representing the message_id returned from either
            /send or /send/list.
          required: false
          schema:
            type: string
            nullable: true
        - name: notification
          in: query
          description: >-
            A unique identifier representing the notification that was used to
            send the event.
          required: false
          schema:
            type: string
            nullable: true
        - name: recipient
          in: query
          description: >-
            A unique identifier representing the recipient associated with the
            requested profile.
          required: false
          schema:
            type: string
            nullable: true
        - name: status
          in: query
          description: >-
            An indicator of the current status of the message. Multiple status
            values can be passed in.
          required: false
          schema:
            type: string
            nullable: true
        - name: tags
          in: query
          description: >-
            A comma delimited list of 'tags'. Messages will be returned if they
            match any of the tags passed in.
          required: false
          schema:
            type: string
            nullable: true
        - name: enqueued_after
          in: query
          description: >-
            The enqueued datetime of a message to filter out messages received
            before.
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
      summary: List messages
      security: *ref_0
  /messages/{message_id}:
    get:
      description: Fetch the status of a message you've previously sent.
      operationId: messages_get
      tags:
        - Messages
      parameters:
        - name: message_id
          in: path
          description: >-
            A unique identifier associated with the message you wish to retrieve
            (results from a send).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetails'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageNotFound'
      summary: Get message
      security: *ref_0
  /messages/{message_id}/cancel:
    post:
      description: >-
        Cancel a message that is currently in the process of being delivered. A
        well-formatted API call to the cancel message API will return either
        `200` status code for a successful cancellation or `409` status code for
        an unsuccessful cancellation. Both cases will include the actual message
        record in the response body (see details below).
      operationId: messages_cancel
      tags:
        - Messages
      parameters:
        - name: message_id
          in: path
          description: A unique identifier representing the message ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDetails'
      summary: Cancel message
      security: *ref_0
  /messages/{message_id}/history:
    get:
      description: Fetch the array of events of a message you've previously sent.
      operationId: messages_getHistory
      tags:
        - Messages
      parameters:
        - name: message_id
          in: path
          description: A unique identifier representing the message ID
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: >-
            A supported Message History type that will filter the events
            returned.
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageHistoryResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageNotFound'
      summary: Get message history
      security: *ref_0
  /messages/{message_id}/output:
    get:
      operationId: messages_getContent
      tags:
        - Messages
      parameters:
        - name: message_id
          in: path
          description: >-
            A unique identifier associated with the message you wish to retrieve
            (results from a send).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderOutputResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageNotFound'
      summary: Get message content
      security: *ref_0
  /messages/{request_id}/output:
    put:
      operationId: messages_archive
      tags:
        - Messages
      parameters:
        - name: request_id
          in: path
          description: A unique identifier representing the request ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
      summary: Archive message
      security: *ref_0
  /profiles/{user_id}:
    get:
      description: Returns the specified user profile.
      operationId: profiles_get
      tags:
        - Profiles
      parameters:
        - name: user_id
          in: path
          description: >-
            A unique identifier representing the user associated with the
            requested profile.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierProfileGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get a profile
      security: *ref_0
    post:
      description: >-
        Merge the supplied values with an existing profile or create a new
        profile if one doesn't already exist.
      operationId: profiles_create
      tags:
        - Profiles
      parameters:
        - name: user_id
          in: path
          description: >-
            A unique identifier representing the user associated with the
            requested profile.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierProfilePostResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Create a profile
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierProfilePostParameters'
    patch:
      description: >-
        Apply a patch to the specified profile or create one if a profile
        doesn't already exist.
      operationId: profiles_update
      tags:
        - Profiles
      parameters:
        - name: user_id
          in: path
          description: >-
            A unique identifier representing the user associated with the
            requested profile.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierProfileUpdateResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Update a profile
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierProfileUpdateRequest'
    put:
      description: >-
        When using `PUT`, be sure to include all the key-value pairs required by
        the recipient's profile. Any key-value pairs that exist in the profile
        but fail to be included in the `PUT` request will be removed from the
        profile. Remember, a `PUT` update is a full replacement of the data. For
        partial updates, use the
        [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.
      operationId: profiles_replace
      tags:
        - Profiles
      parameters:
        - name: user_id
          in: path
          description: >-
            A unique identifier representing the user associated with the
            requested profile.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ICourierProfilePutResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Replace a profile
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierProfilePutRequest'
    delete:
      description: Deletes the specified user profile.
      operationId: profiles_delete
      tags:
        - Profiles
      parameters:
        - name: user_id
          in: path
          description: >-
            A unique identifier representing the user associated with the
            requested profile.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Delete a profile
      security: *ref_0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ICourierProfileDeleteRequest'
  /profiles/{user_id}/lists:
    get:
      description: Returns the subscribed lists for a specified user.
      operationId: profiles_getListSubscriptions
      tags:
        - Profiles
      parameters:
        - name: user_id
          in: path
          description: >-
            A unique identifier representing the user associated with the
            requested profile.
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          description: >-
            A unique identifier that allows for fetching the next set of message
            statuses.
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      summary: Get list subscriptions
      security: *ref_0
components:
  schemas:
    SendMessageResponse:
      title: SendMessageResponse
      type: object
      properties:
        requestId:
          type: string
          description: >
            A successful call to `POST /send` returns a `202` status code along
            with a `requestId` in the response body.


            For send requests that have a single recipient, the `requestId` is
            assigned to the derived message as its message_id. Therefore the
            `requestId` can be supplied to the Message's API for single
            recipient messages.


            For send requests that have multiple recipients (accounts,
            audiences, lists, etc.), Courier assigns a unique id to each derived
            message as its `message_id`. Therefore the `requestId` cannot be
            supplied to the Message's API for single-recipient messages.
      required:
        - requestId
    Audience:
      title: Audience
      type: object
      properties:
        id:
          type: string
          description: A unique identifier representing the audience_id
        name:
          type: string
          description: The name of the audience
        description:
          type: string
          description: A description of the audience
        filter:
          $ref: '#/components/schemas/Filter'
      required:
        - id
        - name
        - description
        - filter
    AudienceRequest:
      title: AudienceRequest
      type: object
      properties:
        id:
          type: string
          nullable: true
          description: A unique identifier representing the audience_id
        name:
          type: string
          nullable: true
          description: The name of the audience
        description:
          type: string
          nullable: true
          description: A description of the audience
        filter:
          $ref: '#/components/schemas/Filter'
          nullable: true
    Filter:
      title: Filter
      oneOf:
        - $ref: '#/components/schemas/ISingleFilterConfig'
        - $ref: '#/components/schemas/INestedFilterConfig'
    Operator:
      title: Operator
      oneOf:
        - $ref: '#/components/schemas/ComparisonOperator'
        - $ref: '#/components/schemas/LogicalOperator'
    IBaseFilterConfig:
      title: IBaseFilterConfig
      type: object
      properties:
        operator:
          $ref: '#/components/schemas/Operator'
          description: |
            The operator to use for filtering 
      required:
        - operator
    FilterConfig:
      title: FilterConfig
      oneOf:
        - $ref: '#/components/schemas/ISingleFilterConfig'
        - $ref: '#/components/schemas/INestedFilterConfig'
    ISingleFilterConfig:
      title: ISingleFilterConfig
      type: object
      description: A single filter to use for filtering
      properties:
        value:
          type: string
          description: The value to use for filtering
        path:
          type: string
          description: >-
            The attribe name from profile whose value will be operated against
            the filter value
      required:
        - value
        - path
      allOf:
        - $ref: '#/components/schemas/IBaseFilterConfig'
    INestedFilterConfig:
      title: INestedFilterConfig
      type: object
      description: The operator to use for filtering
      properties:
        rules:
          type: array
          items:
            $ref: '#/components/schemas/FilterConfig'
      required:
        - rules
      allOf:
        - $ref: '#/components/schemas/IBaseFilterConfig'
    ComparisonOperator:
      title: ComparisonOperator
      type: string
      enum:
        - ENDS_WITH
        - EQ
        - EXISTS
        - GT
        - GTE
        - INCLUDES
        - IS_AFTER
        - IS_BEFORE
        - LT
        - LTE
        - NEQ
        - OMIT
        - STARTS_WITH
    LogicalOperator:
      title: LogicalOperator
      type: string
      enum:
        - AND
        - OR
    IAudience:
      title: IAudience
      type: object
      properties:
        created_at:
          type: string
        description:
          type: string
          nullable: true
        id:
          type: string
        name:
          type: string
          nullable: true
        filter:
          $ref: '#/components/schemas/FilterConfig'
        updated_at:
          type: string
      required:
        - created_at
        - id
        - filter
        - updated_at
    IAudienceMember:
      title: IAudienceMember
      type: object
      properties:
        added_at:
          type: string
        audience_id:
          type: string
        audience_version:
          type: integer
        member_id:
          type: string
        reason:
          type: string
      required:
        - added_at
        - audience_id
        - audience_version
        - member_id
        - reason
    IAudienceListResponse:
      title: IAudienceListResponse
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IAudience'
        paging:
          $ref: '#/components/schemas/ICourierPaging'
      required:
        - items
        - paging
    IAudienceMemberGetResponse:
      title: IAudienceMemberGetResponse
      type: object
      properties:
        audienceMember:
          $ref: '#/components/schemas/IAudienceMember'
      required:
        - audienceMember
    IAudienceMemberListResponse:
      title: IAudienceMemberListResponse
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IAudienceMember'
        paging:
          $ref: '#/components/schemas/ICourierPaging'
      required:
        - items
        - paging
    IAudiencePutResponse:
      title: IAudiencePutResponse
      type: object
      properties:
        audience:
          $ref: '#/components/schemas/IAudience'
      required:
        - audience
    ICourierListAuditEventsParams:
      title: ICourierListAuditEventsParams
      type: object
      properties:
        cursor:
          type: string
          nullable: true
    ICourierGetAuditEventParams:
      title: ICourierGetAuditEventParams
      type: object
      properties:
        auditEventId:
          type: string
      required:
        - auditEventId
    ICourierListAuditEventsResponse:
      title: ICourierListAuditEventsResponse
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/ICourierPaging'
        results:
          type: array
          items:
            $ref: '#/components/schemas/IAuditEvent'
      required:
        - paging
        - results
    Actor:
      title: Actor
      type: object
      properties:
        id:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
    Target:
      title: Target
      type: object
      properties:
        id:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
    IAuditEvent:
      title: IAuditEvent
      type: object
      properties:
        actor:
          $ref: '#/components/schemas/Actor'
          nullable: true
        target:
          $ref: '#/components/schemas/Target'
          nullable: true
        auditEventId:
          type: string
        source:
          type: string
        timestamp:
          type: string
        type:
          type: string
      required:
        - auditEventId
        - source
        - timestamp
        - type
    ICourierAuthIssueTokenParameters:
      title: ICourierAuthIssueTokenParameters
      type: object
      properties:
        scope:
          type: string
        expiresIn:
          type: string
      required:
        - scope
        - expiresIn
    ICourierAuthIssueTokenResponse:
      title: ICourierAuthIssueTokenResponse
      type: object
      properties:
        token:
          type: string
          nullable: true
    AutomationStepAction:
      title: AutomationStepAction
      type: string
      enum:
        - cancel
        - delay
        - invoke
        - send
        - send-list
        - update-profile
    MergeAlgorithm:
      title: MergeAlgorithm
      type: string
      enum:
        - replace
        - none
        - overwrite
        - soft-merge
    IAutomationRunContext:
      title: IAutomationRunContext
      type: object
      properties:
        brand:
          type: string
          nullable: true
        data:
          nullable: true
        profile:
          $ref: '#/components/schemas/Profile'
          nullable: true
        template:
          type: string
          nullable: true
        recipient:
          type: string
          nullable: true
    IAutomationStep:
      title: IAutomationStep
      type: object
      properties:
        if:
          type: string
          nullable: true
        ref:
          type: string
          nullable: true
    IAutomationCancelStep:
      title: IAutomationCancelStep
      type: object
      properties:
        action:
          type: string
          enum:
            - cancel
        cancelation_token:
          type: string
          nullable: true
      required:
        - action
      allOf:
        - $ref: '#/components/schemas/IAutomationStep'
    IAutomationDelayStep:
      title: IAutomationDelayStep
      type: object
      properties:
        action:
          type: string
          enum:
            - delay
        until:
          type: string
          nullable: true
      required:
        - action
      allOf:
        - $ref: '#/components/schemas/IAutomationStep'
    IAutomationInvokeStep:
      title: IAutomationInvokeStep
      type: object
      properties:
        action:
          type: string
          enum:
            - invoke
        template:
          type: string
      required:
        - action
        - template
      allOf:
        - $ref: '#/components/schemas/IAutomationStep'
    IAutomationSendStep:
      title: IAutomationSendStep
      type: object
      properties:
        action:
          type: string
          enum:
            - send
        brand:
          type: string
          nullable: true
        data:
          type: object
          additionalProperties: true
          nullable: true
        override:
          type: object
          additionalProperties: true
          nullable: true
        profile:
          nullable: true
        recipient:
          type: string
          nullable: true
        template:
          type: string
          nullable: true
      required:
        - action
      allOf:
        - $ref: '#/components/schemas/IAutomationStep'
    IAutomationV2SendStep:
      title: IAutomationV2SendStep
      type: object
      properties:
        action:
          type: string
          enum:
            - send
        message:
          $ref: '#/components/schemas/Message'
      required:
        - action
        - message
      allOf:
        - $ref: '#/components/schemas/IAutomationStep'
    IAutomationSendListStep:
      title: IAutomationSendListStep
      type: object
      properties:
        action:
          type: string
          enum:
            - send-list
        brand:
          type: string
          nullable: true
        data:
          type: object
          additionalProperties: true
          nullable: true
        list:
          type: string
        override:
          type: object
          additionalProperties: true
          nullable: true
        template:
          type: string
          nullable: true
      required:
        - action
        - list
      allOf:
        - $ref: '#/components/schemas/IAutomationStep'
    IAutomationUpdateProfileStep:
      title: IAutomationUpdateProfileStep
      type: object
      properties:
        action:
          type: string
          enum:
            - update-profile
        recipient_id:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'
        merge:
          $ref: '#/components/schemas/MergeAlgorithm'
      required:
        - action
        - recipient_id
        - profile
        - merge
    AutomationStep:
      title: AutomationStep
      oneOf:
        - $ref: '#/components/schemas/IAutomationCancelStep'
        - $ref: '#/components/schemas/IAutomationDelayStep'
        - $ref: '#/components/schemas/IAutomationInvokeStep'
        - $ref: '#/components/schemas/IAutomationSendStep'
        - $ref: '#/components/schemas/IAutomationV2SendStep'
        - $ref: '#/components/schemas/IAutomationSendListStep'
        - $ref: '#/components/schemas/IAutomationUpdateProfileStep'
    IAutomation:
      title: IAutomation
      type: object
      properties:
        cancelation_token:
          type: string
          nullable: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/AutomationStep'
      required:
        - steps
    ICourierAutomationInvokeParams:
      title: ICourierAutomationInvokeParams
      type: object
      properties:
        brand:
          type: string
          nullable: true
        data:
          type: object
          additionalProperties: true
          nullable: true
        profile:
          $ref: '#/components/schemas/Profile'
          nullable: true
        recipient:
          type: string
          nullable: true
        template:
          type: string
          nullable: true
    ICourierAutomationAdHocInvokeParams:
      title: ICourierAutomationAdHocInvokeParams
      type: object
      properties:
        automation:
          $ref: '#/components/schemas/IAutomation'
      required:
        - automation
      allOf:
        - $ref: '#/components/schemas/ICourierAutomationInvokeParams'
    ICourierAutomationConfig:
      title: ICourierAutomationConfig
      type: object
      properties:
        idempotencyKey:
          type: string
          nullable: true
        idempotencyExpiry:
          type: integer
          nullable: true
    ICourierAutomationInvokeTemplateParams:
      title: ICourierAutomationInvokeTemplateParams
      type: object
      properties:
        templateId:
          type: string
      required:
        - templateId
      allOf:
        - $ref: '#/components/schemas/ICourierAutomationInvokeParams'
    ICourierAutomationInvokeResponse:
      title: ICourierAutomationInvokeResponse
      type: object
      properties:
        runId:
          type: string
      required:
        - runId
    Profile:
      title: Profile
    ICourierBrandSnippets:
      title: ICourierBrandSnippets
      type: object
      properties:
        format:
          type: string
        name:
          type: string
        value:
          type: string
      required:
        - format
        - name
        - value
    ICourierBrand:
      title: ICourierBrand
      type: object
      properties:
        created:
          type: integer
          description: >-
            The date/time of when the brand was created. Represented in
            milliseconds since Unix epoch.
        id:
          type: string
          nullable: true
          description: Brand Identifier
        name:
          type: string
          description: Brand name
        published:
          type: integer
          description: >-
            The date/time of when the brand was published. Represented in
            milliseconds since Unix epoch.
        settings:
          $ref: '#/components/schemas/ICourierBrandSettings'
        updated:
          type: integer
          description: >-
            The date/time of when the brand was updated. Represented in
            milliseconds since Unix epoch.
        snippets:
          $ref: '#/components/schemas/ICourierBrandSnippets'
          nullable: true
        version:
          type: string
          description: The version identifier for the brand
      required:
        - created
        - name
        - published
        - settings
        - updated
        - version
    ICourierPaging:
      title: ICourierPaging
      type: object
      properties:
        cursor:
          type: string
          nullable: true
        more:
          type: boolean
      required:
        - more
    ICourierBrandParameters:
      title: ICourierBrandParameters
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          description: The name of the brand.
        settings:
          $ref: '#/components/schemas/ICourierBrandSettings'
        snippets:
          $ref: '#/components/schemas/ICourierBrandSnippets'
          nullable: true
      required:
        - name
        - settings
    ICourierBrandPostConfig:
      title: ICourierBrandPostConfig
      type: object
      properties:
        idempotencyKey:
          type: string
          nullable: true
        idempotencyExpiry:
          type: integer
          nullable: true
    ICourierBrandPutParameters:
      title: ICourierBrandPutParameters
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: The name of the brand.
        settings:
          $ref: '#/components/schemas/ICourierBrandSettings'
        snippets:
          $ref: '#/components/schemas/ICourierBrandSnippets'
          nullable: true
      required:
        - id
        - name
        - settings
    ICourierBrandGetAllResponse:
      title: ICourierBrandGetAllResponse
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/ICourierPaging'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ICourierBrand'
      required:
        - paging
        - results
    ICourierBrandSettings:
      title: ICourierBrandSettings
      type: object
      properties:
        colors:
          $ref: '#/components/schemas/IBrandColors'
          nullable: true
        email:
          $ref: '#/components/schemas/Email'
          nullable: true
    Email:
      title: Email
      type: object
      properties:
        footer: {}
        header: {}
      required:
        - footer
        - header
    ICourierBrandsResponse:
      title: ICourierBrandsResponse
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/ICourierPaging'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ICourierBrand'
      required:
        - paging
        - results
    IInboundBulkMessageApiV1:
      title: IInboundBulkMessageApiV1
      type: object
      properties:
        brand:
          type: string
          nullable: true
          description: >-
            A unique identifier that represents the brand that should be used
            for rendering the notification.
        data:
          nullable: true
          description: >-
            JSON that includes any data you want to pass to a message template.
            The data will populate the corresponding template variables.
        event:
          type: string
        locale:
          type: string
          nullable: true
        override:
          nullable: true
          description: >-
            JSON that is merged into the request sent by Courier to the provider
            to override properties or to gain access to features in the provider
            API that are not natively supported by Courier.
      required:
        - event
    InboundBulkMessageApiV2:
      title: InboundBulkMessageApiV2
    IInboundBulkMessage:
      title: IInboundBulkMessage
      type: object
      properties:
        message:
          $ref: '#/components/schemas/InboundBulkMessageApiV2'
          nullable: true
      allOf:
        - $ref: '#/components/schemas/IInboundBulkMessageApiV1'
    InboundBulkMessage:
      title: InboundBulkMessage
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/IInboundBulkMessage'
    ICourierBulkConfig:
      title: ICourierBulkConfig
      type: object
      properties:
        idempotencyKey:
          type: string
          nullable: true
        idempotencyExpiry:
          type: integer
          nullable: true
    ICourierBulkCreateJobParams:
      title: ICourierBulkCreateJobParams
      type: object
      properties:
        message:
          $ref: '#/components/schemas/IInboundBulkMessage'
      required:
        - message
    ICourierBulkCreateJobResponse:
      title: ICourierBulkCreateJobResponse
      type: object
      properties:
        jobId:
          type: string
      required:
        - jobId
    IInboundBulkMessageUser:
      title: IInboundBulkMessageUser
      type: object
      properties:
        preferences:
          $ref: '#/components/schemas/IRecipientPreferences'
          nullable: true
        profile:
          nullable: true
        recipient:
          type: string
          nullable: true
        data:
          nullable: true
        to:
          $ref: '#/components/schemas/UserRecipient'
          nullable: true
    InboundBulkMessageUser:
      title: InboundBulkMessageUser
      type: object
      properties: {}
      allOf:
        - $ref: '#/components/schemas/IInboundBulkMessageUser'
    ICourierBulkIngestUsersParams:
      title: ICourierBulkIngestUsersParams
      type: object
      properties:
        jobId:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/InboundBulkMessageUser'
      required:
        - jobId
        - users
    ICourierBulkIngestError:
      title: ICourierBulkIngestError
      type: object
      properties:
        user: {}
        error: {}
      required:
        - user
        - error
    ICourierBulkIngestUsersResponse:
      title: ICourierBulkIngestUsersResponse
      type: object
      properties:
        total:
          type: integer
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ICourierBulkIngestError'
          nullable: true
      required:
        - total
    ICourierBulkRunJobParams:
      title: ICourierBulkRunJobParams
      type: object
      properties:
        jobId:
          type: string
      required:
        - jobId
    ICourierBulkGetJobParams:
      title: ICourierBulkGetJobParams
      type: object
      properties:
        jobId:
          type: string
      required:
        - jobId
    BulkJobStatus:
      title: BulkJobStatus
      type: string
      enum:
        - CREATED
        - PROCESSING
        - COMPLETED
        - ERROR
    BulkJobUserStatus:
      title: BulkJobUserStatus
      type: string
      enum:
        - PENDING
        - ENQUEUED
        - ERROR
    ICourierBulkGetJobResponse:
      title: ICourierBulkGetJobResponse
      type: object
      properties:
        job:
          $ref: '#/components/schemas/JobDetails'
      required:
        - job
    JobDetails:
      title: JobDetails
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/IInboundBulkMessage'
        enqueued:
          type: integer
        failures:
          type: integer
        received:
          type: integer
        status:
          $ref: '#/components/schemas/BulkJobStatus'
      required:
        - definition
        - enqueued
        - failures
        - received
        - status
    ICourierBulkGetJobUsersParams:
      title: ICourierBulkGetJobUsersParams
      type: object
      properties:
        jobId:
          type: string
        cursor:
          type: string
          nullable: true
      required:
        - jobId
    ICourierBulkMessageUserResponse:
      title: ICourierBulkMessageUserResponse
      type: object
      properties:
        status:
          $ref: '#/components/schemas/BulkJobUserStatus'
        messageId:
          type: string
          nullable: true
      required:
        - status
      allOf:
        - $ref: '#/components/schemas/IInboundBulkMessageUser'
    ICourierBulkGetJobUsersResponse:
      title: ICourierBulkGetJobUsersResponse
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ICourierBulkMessageUserResponse'
        paging:
          $ref: '#/components/schemas/ICourierPaging'
      required:
        - items
        - paging
    BaseError:
      title: BaseError
      type: object
      properties:
        message:
          type: string
          description: A message describing the error that occurred.
      required:
        - message
    BadRequest:
      title: BadRequest
      type: object
      properties:
        type:
          type: string
          enum:
            - invalid_request_error
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/BaseError'
    PaymentRequired:
      title: PaymentRequired
      type: object
      properties:
        type:
          type: string
          enum:
            - authorization_error
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/BaseError'
    AlreadyExists:
      title: AlreadyExists
      type: object
      properties:
        type:
          type: string
          enum:
            - invalid_request_error
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/BaseError'
    Conflict:
      title: Conflict
      type: object
      properties:
        type:
          type: string
          enum:
            - invalid_request_error
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/BaseError'
    NotFound:
      title: NotFound
      type: object
      properties:
        type:
          type: string
          enum:
            - invalid_request_error
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/BaseError'
    MessageNotFound:
      title: MessageNotFound
      type: object
      properties:
        type:
          type: string
          enum:
            - invalid_request_error
      required:
        - type
      allOf:
        - $ref: '#/components/schemas/BaseError'
    IBrandColors:
      title: IBrandColors
      type: object
      properties:
        primary:
          type: string
          nullable: true
        secondary:
          type: string
          nullable: true
        tertiary:
          type: string
          nullable: true
    Rule:
      title: Rule
      type: object
      properties:
        start:
          type: string
          nullable: true
        until:
          type: string
      required:
        - until
    PreferenceStatus:
      title: PreferenceStatus
      type: string
      enum:
        - OPTED_IN
        - OPTED_OUT
        - REQUIRED
    ChannelClassification:
      title: ChannelClassification
      type: string
      enum:
        - direct_message
        - email
        - push
        - sms
    ChannelPreference:
      title: ChannelPreference
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/ChannelClassification'
      required:
        - channel
    ICourierNotificationPreferences:
      title: ICourierNotificationPreferences
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NotificationPreferenceDetails'
    NotificationPreferenceDetails:
      title: NotificationPreferenceDetails
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PreferenceStatus'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
          nullable: true
        channel_preferences:
          type: array
          items:
            $ref: '#/components/schemas/ChannelPreference'
          nullable: true
      required:
        - status
    IRecipientPreferences:
      title: IRecipientPreferences
      type: object
      properties:
        categories:
          $ref: '#/components/schemas/ICourierNotificationPreferences'
          nullable: true
        notifications:
          $ref: '#/components/schemas/ICourierNotificationPreferences'
          nullable: true
    ICourierList:
      title: ICourierList
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        created:
          type: integer
          nullable: true
        updated:
          type: integer
          nullable: true
      required:
        - id
        - name
    ICourierRecipientSubscriptionsResponse:
      title: ICourierRecipientSubscriptionsResponse
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/ICourierPaging'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ICourierList'
      required:
        - paging
        - results
    ICourierListPutParams:
      title: ICourierListPutParams
      type: object
      properties:
        name:
          type: string
        preferences:
          $ref: '#/components/schemas/ICourierRecipientPreferences'
          nullable: true
      required:
        - name
    ICourierListGetAllParams:
      title: ICourierListGetAllParams
      type: object
      properties:
        cursor:
          type: string
          nullable: true
        pattern:
          type: string
          nullable: true
    ICourierListGetAllResponse:
      title: ICourierListGetAllResponse
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/ICourierPaging'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ICourierList'
      required:
        - paging
        - items
    ICourierListGetSubscriptionsParams:
      title: ICourierListGetSubscriptionsParams
      type: object
      properties:
        cursor:
          type: string
          nullable: true
    ICourierListRecipient:
      title: ICourierListRecipient
      type: object
      properties:
        recipientId:
          type: string
        created:
          type: string
          nullable: true
        preferences:
          $ref: '#/components/schemas/ICourierRecipientPreferences'
          nullable: true
      required:
        - recipientId
    ICourierListGetSubscriptionsResponse:
      title: ICourierListGetSubscriptionsResponse
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/ICourierPaging'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ICourierListRecipient'
      required:
        - paging
        - items
    ICourierListFindByRecipientIdParams:
      title: ICourierListFindByRecipientIdParams
      type: object
      properties:
        cursor:
          type: string
          nullable: true
    ICourierListFindByRecipientIdResponse:
      title: ICourierListFindByRecipientIdResponse
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/ICourierPaging'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ICourierList'
      required:
        - paging
        - results
    ICourierRecipientPreferences:
      title: ICourierRecipientPreferences
      type: object
      properties:
        notifications:
          $ref: '#/components/schemas/ICourierNotificationPreferences'
        categories:
          $ref: '#/components/schemas/ICourierNotificationPreferences'
          nullable: true
      required:
        - notifications
    ICourierPutSubscriptionsRecipient:
      title: ICourierPutSubscriptionsRecipient
      type: object
      properties:
        recipientId:
          type: string
        preferences:
          $ref: '#/components/schemas/ICourierRecipientPreferences'
          nullable: true
      required:
        - recipientId
    MessageStatus:
      title: MessageStatus
      type: string
      enum:
        - CLICKED
        - DELIVERED
        - ENQUEUED
        - OPENED
        - CANCELED
        - SENT
        - UNDELIVERABLE
        - UNMAPPED
        - UNROUTABLE
    MessageDetails:
      title: MessageDetails
      type: object
      properties:
        id:
          type: string
          description: >-
            A unique identifier associated with the message you wish to retrieve
            (results from a send).
        status:
          $ref: '#/components/schemas/MessageStatus'
          description: The current status of the message.
        enqueued:
          type: integer
          description: >-
            A UTC timestamp at which Courier received the message request.
            Stored as a millisecond representation of the Unix epoch.
        sent:
          type: integer
          description: >-
            A UTC timestamp at which Courier passed the message to the
            Integration provider. Stored as a millisecond representation of the
            Unix epoch.
        delivered:
          type: integer
          description: >-
            A UTC timestamp at which the Integration provider delivered the
            message. Stored as a millisecond representation of the Unix epoch.
        opened:
          type: integer
          description: >-
            A UTC timestamp at which the recipient opened a message for the
            first time. Stored as a millisecond representation of the Unix
            epoch.
        clicked:
          type: integer
          description: >-
            A UTC timestamp at which the recipient clicked on a tracked link for
            the first time. Stored as a millisecond representation of the Unix
            epoch.
        recipient:
          type: string
          description: >-
            A unique identifier associated with the recipient of the delivered
            message.
        event:
          type: string
          description: >-
            A unique identifier associated with the event of the delivered
            message.
        notification:
          type: string
          description: >-
            A unique identifier associated with the notification of the
            delivered message.
        error:
          type: string
          nullable: true
          description: A message describing the error that occurred.
        reason:
          $ref: '#/components/schemas/Reason'
          nullable: true
          description: The reason for the current status of the message.
      required:
        - id
        - status
        - enqueued
        - sent
        - delivered
        - opened
        - clicked
        - recipient
        - event
        - notification
    Reason:
      title: Reason
      type: string
      enum:
        - FILTERED
        - NO_CHANNELS
        - NO_PROVIDERS
        - PROVIDER_ERROR
        - UNPUBLISHED
        - UNSUBSCRIBED
    ListMessagesResponse:
      title: ListMessagesResponse
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/Paging'
          description: Paging information for the result set.
        results:
          type: array
          items:
            $ref: '#/components/schemas/MessageDetails'
          description: An array of messages with their details.
      required:
        - paging
        - results
    Paging:
      title: Paging
      type: object
      properties:
        cursor:
          type: string
          description: >-
            A unique identifier that allows for fetching the next set of
            objects.
        more:
          type: boolean
          description: Whether or not there are more message statuses that can be fetched.
      required:
        - cursor
        - more
    MessageHistoryResponse:
      title: MessageHistoryResponse
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/MessageDetails'
      required:
        - results
    RenderOutputResponse:
      title: RenderOutputResponse
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/RenderOutput'
          description: An array of render output of a previously sent message.
      required:
        - results
    RenderedMessageBlock:
      title: RenderedMessageBlock
      type: object
      properties:
        type:
          type: string
          description: The block type of the rendered message block.
        text:
          type: string
          description: The block text of the rendered message block.
      required:
        - type
        - text
    RenderedMessageContent:
      title: RenderedMessageContent
      type: object
      properties:
        html:
          type: string
          description: The html content of the rendered message.
        title:
          type: string
          description: The title of the rendered message.
        body:
          type: string
          description: The body of the rendered message.
        subject:
          type: string
          description: The subject of the rendered message.
        text:
          type: string
          description: The text of the rendered message.
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/RenderedMessageBlock'
          description: The blocks of the rendered message.
      required:
        - html
        - title
        - body
        - subject
        - text
        - blocks
    RenderOutput:
      title: RenderOutput
      type: object
      properties:
        channel:
          type: string
          description: The channel used for rendering the message.
        channel_id:
          type: string
          description: The ID of channel used for rendering the message.
        content:
          $ref: '#/components/schemas/RenderedMessageContent'
          description: Content details of the rendered message.
      required:
        - channel
        - channel_id
        - content
    Address:
      title: Address
      type: object
      properties:
        formatted:
          type: string
        street_address:
          type: string
        locality:
          type: string
        region:
          type: string
        postal_code:
          type: string
        country:
          type: string
      required:
        - formatted
        - street_address
        - locality
        - region
        - postal_code
        - country
    UserProfile:
      title: UserProfile
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        birthdate:
          type: string
        email:
          type: string
        email_verified:
          type: boolean
        family_name:
          type: string
        gender:
          type: string
        given_name:
          type: string
        locale:
          type: string
        middle_name:
          type: string
        name:
          type: string
        nickname:
          type: string
        phone_number:
          type: string
        phone_number_verified:
          type: boolean
        picture:
          type: string
        preferred_name:
          type: string
        profile:
          type: string
        sub:
          type: string
        updated_at:
          type: string
        website:
          type: string
        zoneinfo:
          type: string
        custom:
          description: >-
            A free form object. Due to a limitation of the API Explorer, you can
            only enter string key/values below, but this API accepts more
            complex object structures.
        airship:
          $ref: '#/components/schemas/AirshipProfile'
        apn:
          type: string
        target_arn:
          type: string
        discord:
          $ref: '#/components/schemas/Discord'
        expo:
          $ref: '#/components/schemas/Expo'
        facebookPSID:
          type: string
        firebaseToken:
          type: string
        intercom:
          $ref: '#/components/schemas/Intercom'
        ms_teams:
          $ref: '#/components/schemas/MsTeams'
      required:
        - address
        - birthdate
        - email
        - email_verified
        - family_name
        - gender
        - given_name
        - locale
        - middle_name
        - name
        - nickname
        - phone_number
        - phone_number_verified
        - picture
        - preferred_name
        - profile
        - sub
        - updated_at
        - website
        - zoneinfo
        - custom
        - airship
        - apn
        - target_arn
        - discord
        - expo
        - facebookPSID
        - firebaseToken
        - intercom
        - ms_teams
    AirshipProfile:
      title: AirshipProfile
      type: object
      properties:
        audience:
          $ref: '#/components/schemas/AirshipProfileAudience'
        device_types:
          type: array
          items:
            $ref: '#/components/schemas/DeviceType'
      required:
        - audience
        - device_types
    AirshipProfileAudience:
      title: AirshipProfileAudience
      type: object
      properties:
        named_user:
          type: string
      required:
        - named_user
    DeviceType:
      title: DeviceType
    SnoozeRuleType:
      title: SnoozeRuleType
      type: string
      enum:
        - snooze
    SnoozeRule:
      title: SnoozeRule
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SnoozeRuleType'
        start:
          type: string
        until:
          type: string
      required:
        - type
        - start
        - until
    Discord:
      title: Discord
      oneOf:
        - $ref: '#/components/schemas/SendToChannel'
        - $ref: '#/components/schemas/SendDirectMessage'
    SendToChannel:
      title: SendToChannel
      type: object
      properties:
        channel_id:
          type: string
      required:
        - channel_id
    SendDirectMessage:
      title: SendDirectMessage
      type: object
      properties:
        user_id:
          type: string
      required:
        - user_id
    Expo:
      title: Expo
      oneOf:
        - $ref: '#/components/schemas/Token'
        - $ref: '#/components/schemas/MultipleTokens'
    Token:
      title: Token
      type: object
      properties:
        token:
          type: string
      required:
        - token
    MultipleTokens:
      title: MultipleTokens
      type: object
      properties:
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/Token'
      required:
        - tokens
    Intercom:
      title: Intercom
      type: object
      properties:
        from:
          type: string
        to:
          $ref: '#/components/schemas/IntercomeRecipient'
      required:
        - from
        - to
    IntercomeRecipient:
      title: IntercomeRecipient
      type: object
      properties:
        id:
          type: string
      required:
        - id
    MsTeams:
      title: MsTeams
      oneOf:
        - $ref: '#/components/schemas/SendToMsTeamsChannel'
        - $ref: '#/components/schemas/SendToMsTeamsUser'
    SendToMsTeamsUser:
      title: SendToMsTeamsUser
      type: object
      properties:
        user_id:
          type: string
        tenant_id:
          type: string
        service_url:
          type: string
      required:
        - user_id
        - tenant_id
        - service_url
    SendToMsTeamsChannel:
      title: SendToMsTeamsChannel
      type: object
      properties:
        conversation_id:
          type: string
        tenant_id:
          type: string
        service_url:
          type: string
      required:
        - conversation_id
        - tenant_id
        - service_url
    ICourierProfileGetParameters:
      title: ICourierProfileGetParameters
      type: object
      properties:
        recipientId:
          type: string
      required:
        - recipientId
    ICourierProfileGetResponse:
      title: ICourierProfileGetResponse
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
        - profile
    ICourierProfileUpdateResponse:
      title: ICourierProfileUpdateResponse
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
        - profile
    UpsertProfile:
      title: UpsertProfile
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
          nullable: true
        birthdate:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        email_verified:
          type: boolean
        family_name:
          type: string
          nullable: true
        gender:
          type: string
          nullable: true
        given_name:
          type: string
          nullable: true
        locale:
          type: string
          nullable: true
        middle_name:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        nickname:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
        phone_number_verified:
          type: boolean
        picture:
          type: string
          nullable: true
        preferred_name:
          type: string
          nullable: true
        profile:
          type: string
          nullable: true
        sub:
          type: string
          nullable: true
        updated_at:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        zoneinfo:
          type: string
          nullable: true
        custom:
          nullable: true
          description: >-
            A free form object. Due to a limitation of the API Explorer, you can
            only enter string key/values below, but this API accepts more
            complex object structures.
        airship:
          $ref: '#/components/schemas/AirshipProfile'
          nullable: true
        apn:
          type: string
          nullable: true
        target_arn:
          type: string
          nullable: true
        discord:
          $ref: '#/components/schemas/Discord'
          nullable: true
        expo:
          $ref: '#/components/schemas/Expo'
          nullable: true
        facebookPSID:
          type: string
          nullable: true
        firebaseToken:
          type: string
          nullable: true
        intercom:
          $ref: '#/components/schemas/Intercom'
          nullable: true
        ms_teams:
          $ref: '#/components/schemas/MsTeams'
          nullable: true
      required:
        - email_verified
        - phone_number_verified
    ICourierProfileUpdateRequest:
      title: ICourierProfileUpdateRequest
      type: object
      properties:
        patch:
          type: array
          items:
            $ref: '#/components/schemas/PatchOperation'
      required:
        - patch
    PatchOperation:
      title: PatchOperation
      type: object
      properties:
        op:
          type: string
          description: The operation to perform.
        path:
          type: string
          description: The JSON path specifying the part of the profile to operate on.
        value:
          type: string
          description: The value for the operation.
      required:
        - op
        - path
        - value
    ICourierProfileReplaceRequest:
      title: ICourierProfileReplaceRequest
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UpsertProfile'
      required:
        - profile
    ICourierProfilePostResponse:
      title: ICourierProfilePostResponse
      type: object
      properties:
        status:
          type: string
      required:
        - status
    ICourierProfilePutResponse:
      title: ICourierProfilePutResponse
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ICourierProfilePutResponseStatus'
      required:
        - status
    ICourierProfilePutRequest:
      title: ICourierProfilePutRequest
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
        - profile
    ICourierProfileDeleteRequest:
      title: ICourierProfileDeleteRequest
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
        - profile
    ICourierProfilePutResponseStatus:
      title: ICourierProfilePutResponseStatus
      type: string
      enum:
        - SUCCESS
    ICourierProfilePostParameters:
      title: ICourierProfilePostParameters
      type: object
      properties:
        recipientId:
          type: string
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
        - recipientId
        - profile
    List:
      title: List
      type: object
      properties:
        listId:
          type: string
        preferences:
          $ref: '#/components/schemas/IRecipientPreferences'
          nullable: true
      required:
        - listId
    Message:
      title: Message
      oneOf:
        - description: >-
            Describes the content of the message in a way that will work for
            email, push, chat, or any channel.
          $ref: '#/components/schemas/ContentMessage'
        - description: >-
            A template for a type of message that can be sent more than once.
            For example, you might create an "Appointment Reminder" Notification
            or “Reset Password” Notifications.
          $ref: '#/components/schemas/TemplateMessage'
    TemplateMessage:
      title: TemplateMessage
      type: object
      properties:
        template:
          type: string
          description: >
            The id of the notification template to be rendered and sent to the
            recipient(s). 

            This field or the content field must be supplied.
      required:
        - template
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
    ContentMessage:
      title: ContentMessage
      type: object
      description: >
        The message property has the following primary top-level properties.
        They define the destination and content of the message.

        Additional advanced configuration fields [are defined
        below](https://www.courier.com/docs/reference/send/message/#other-message-properties).
      properties:
        content:
          $ref: '#/components/schemas/Content'
          description: >
            Describes the content of the message in a way that will work for
            email, push, 

            chat, or any channel. Either this or template must be specified.
      required:
        - content
      allOf:
        - $ref: '#/components/schemas/BaseMessage'
    BaseMessage:
      title: BaseMessage
      type: object
      properties:
        to:
          $ref: '#/components/schemas/MessageRecipient'
          description: The recipient or a list of recipients of the message
        data:
          $ref: '#/components/schemas/MessageData'
          nullable: true
          description: >
            An arbitrary object that includes any data you want to pass to the
            message.

            The data will populate the corresponding template or elements
            variables.
        brand_id:
          type: string
          nullable: true
        channels:
          $ref: '#/components/schemas/MessageChannels'
          nullable: true
          description: >
            "Define run-time configuration for one or more channels. If you
            don't specify channels, 

            the default configuration for each channel will be used. Valid
            ChannelId's are: email, 

            sms, push, inbox, direct_message, banner, and webhook."
        context:
          $ref: '#/components/schemas/MessageContext'
          nullable: true
          description: >-
            Context to load with this recipient. Will override any context set
            on message.context.
        metadata:
          $ref: '#/components/schemas/MessageMetadata'
          nullable: true
          description: >-
            Metadata such as utm tracking attached with the notification through
            this channel.
        providers:
          $ref: '#/components/schemas/MessageProviders'
          nullable: true
          description: >-
            An object whose keys are valid provider identifiers which map to an
            object.
        routing:
          $ref: '#/components/schemas/Routing'
          nullable: true
        timeout:
          $ref: '#/components/schemas/Timeout'
          nullable: true
          description: >-
            Time in ms to attempt the channel before failing over to the next
            available channel.
        delay:
          $ref: '#/components/schemas/Delay'
          nullable: true
          description: Defines the time to wait before delivering the message.
        expiry:
          $ref: '#/components/schemas/Expiry'
          nullable: true
          description: >
            "Expiry allows you to set an absolute or relative time in which a
            message expires. 

            Note: This is only valid for the Courier Inbox channel as of
            12-08-2022."
      required:
        - to
    MessageRecipient:
      title: MessageRecipient
      oneOf:
        - $ref: '#/components/schemas/Recipient'
        - type: array
          items:
            $ref: '#/components/schemas/Recipient'
    Recipient:
      title: Recipient
      oneOf:
        - $ref: '#/components/schemas/AudienceRecipient'
        - $ref: '#/components/schemas/ListRecipient'
        - $ref: '#/components/schemas/ListPatternRecipient'
        - $ref: '#/components/schemas/UserRecipient'
    AudienceRecipient:
      title: AudienceRecipient
      type: object
      properties:
        audience_id:
          type: string
          description: >-
            A unique identifier associated with an Audience. A message will be
            sent to each user in the audience.
        data:
          $ref: '#/components/schemas/MessageData'
          nullable: true
        filters:
          type: array
          items:
            $ref: '#/components/schemas/AudienceFilter'
          nullable: true
      required:
        - audience_id
    InvalidListPatternRecipient:
      title: InvalidListPatternRecipient
      type: object
      properties:
        user_id:
          type: string
        list_id:
          type: string
      required:
        - user_id
        - list_id
    ListPatternRecipientType:
      title: ListPatternRecipientType
      type: object
      properties: {}
    ListPatternRecipient:
      title: ListPatternRecipient
      type: object
      properties:
        list_pattern:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/MessageData'
          nullable: true
      allOf:
        - $ref: '#/components/schemas/ListPatternRecipientType'
    InvalidListRecipient:
      title: InvalidListRecipient
      type: object
      properties:
        user_id:
          type: string
        list_pattern:
          type: string
      required:
        - user_id
        - list_pattern
    ListRecipientType:
      title: ListRecipientType
      type: object
      properties: {}
    ListRecipient:
      title: ListRecipient
      type: object
      properties:
        list_id:
          type: string
          nullable: true
        data:
          $ref: '#/components/schemas/MessageData'
          nullable: true
        filters:
          type: array
          items:
            $ref: '#/components/schemas/ListFilter'
          nullable: true
      allOf:
        - $ref: '#/components/schemas/ListRecipientType'
    InvalidUserRecipient:
      title: InvalidUserRecipient
      type: object
      properties:
        list_id:
          type: string
        list_pattern:
          type: string
      required:
        - list_id
        - list_pattern
    UserRecipientType:
      title: UserRecipientType
      type: object
      properties: {}
    UserRecipient:
      title: UserRecipient
      type: object
      properties:
        account_id:
          type: string
          nullable: true
          description: Use `tenant_id` instad.
        context:
          $ref: '#/components/schemas/MessageContext'
          nullable: true
          description: Context information such as tenant_id to send the notification with.
        data:
          $ref: '#/components/schemas/MessageData'
          nullable: true
        email:
          type: string
          nullable: true
        locale:
          type: string
          nullable: true
          description: The user's preferred ISO 639-1 language code.
        user_id:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
        preferences:
          $ref: '#/components/schemas/IProfilePreferences'
          nullable: true
        tenant_id:
          type: string
          nullable: true
          description: >
            An id of a tenant, [see tenants api
            docs](https://www.courier.com/docs/reference/tenants). 

            Will load brand, default preferences and any other base context data
            associated with this tenant.
      allOf:
        - $ref: '#/components/schemas/UserRecipientType'
    MessageData:
      title: MessageData
      type: object
      additionalProperties: true
    AudienceFilter:
      title: AudienceFilter
      type: object
      properties:
        operator:
          type: string
          enum:
            - MEMBER_OF
          description: Send to users only if they are member of the account
        path:
          type: string
          enum:
            - account_id
        value:
          type: string
      required:
        - operator
        - path
        - value
    MessageContext:
      title: MessageContext
      type: object
      properties:
        tenant_id:
          type: string
          nullable: true
          description: >
            An id of a tenant, see [tenants api
            docs](https://www.courier.com/docs/reference/tenants/). 

            Will load brand, default preferences and any other base context data
            associated with this tenant.
    ListFilter:
      title: ListFilter
      type: object
      properties:
        operator:
          type: string
          enum:
            - MEMBER_OF
          description: Send to users only if they are member of the account
        path:
          type: string
          enum:
            - account_id
        value:
          type: string
      required:
        - operator
        - path
        - value
    Expiry:
      title: Expiry
      type: object
      properties:
        expires_at:
          type: string
          nullable: true
          description: >-
            An epoch timestamp or ISO8601 timestamp with timezone
            `(YYYY-MM-DDThh:mm:ss.sTZD)` that describes the time in which a
            message expires.
        expires_in:
          $ref: '#/components/schemas/ExpiresInType'
          description: >-
            A duration in the form of milliseconds or an ISO8601 Duration format
            (i.e. P1DT4H).
      required:
        - expires_in
    ExpiresInType:
      title: ExpiresInType
      oneOf:
        - type: string
        - type: integer
    Delay:
      title: Delay
      type: object
      properties:
        duration:
          type: integer
          description: The duration of the delay in milliseconds.
      required:
        - duration
    Routing:
      title: Routing
      type: object
      description: >
        Allows you to customize which channel(s) Courier will potentially
        deliver the message. 

        If no routing key is specified, Courier will use the default routing
        configuration or 

        routing defined by the template.
      properties:
        method:
          $ref: '#/components/schemas/RoutingMethod'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/RoutingChannel'
          description: >
            A list of channels or providers to send the message through. Can
            also recursively define 

            sub-routing methods, which can be useful for defining advanced push
            notification 

            delivery strategies.
      required:
        - method
        - channels
    MessageChannels:
      title: MessageChannels
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Channel'
    Channel:
      title: Channel
      type: object
      properties:
        brand_id:
          type: string
          nullable: true
          description: >
            Id of the brand that should be used for rendering the message. 

            If not specified, the brand configured as default brand will be
            used.
        providers:
          type: array
          items:
            type: string
          nullable: true
          description: |
            A list of providers enabled for this channel. Courier will select 
            one provider to send through unless routing_method is set to all.
        routing_method:
          $ref: '#/components/schemas/RoutingMethod'
          nullable: true
          description: >
            The method for selecting the providers to send the message with. 

            Single will send to one of the available providers for this
            channel, 

            all will send the message through all channels. Defaults to
            `single`.
        if:
          type: string
          nullable: true
          description: >
            A JavaScript conditional expression to determine if the message
            should 

            be sent through the channel. Has access to the data and profile
            object. 

            For example, `data.name === profile.name`
        timeouts:
          $ref: '#/components/schemas/Timeouts'
          nullable: true
        override:
          $ref: '#/components/schemas/Override'
          nullable: true
          description: Channel specific overrides.
        metadata:
          $ref: '#/components/schemas/ChannelMetadata'
          nullable: true
    ChannelMetadata:
      title: ChannelMetadata
      type: object
      properties:
        utm:
          $ref: '#/components/schemas/UTM'
          nullable: true
    Timeout:
      title: Timeout
      type: object
      properties:
        provider:
          type: object
          additionalProperties:
            type: integer
          nullable: true
        channel:
          type: object
          additionalProperties:
            type: integer
          nullable: true
        message:
          type: integer
          nullable: true
        escalation:
          type: integer
          nullable: true
        criteria:
          $ref: '#/components/schemas/Criteria'
          nullable: true
    Criteria:
      title: Criteria
      type: string
      enum:
        - no-escalation
        - delivered
        - viewed
        - engaged
    RoutingMethod:
      title: RoutingMethod
      type: string
      enum:
        - all
        - single
    Timeouts:
      title: Timeouts
      type: object
      properties:
        provider:
          type: integer
          nullable: true
        channel:
          type: integer
          nullable: true
    Override:
      title: Override
      type: string
      enum:
        - MessageChannelEmailOverride
        - MessageChannelPushOverride
    MessageChannelEmailOverride:
      title: MessageChannelEmailOverride
      type: object
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
          nullable: true
        bcc:
          type: string
          nullable: true
        brand:
          $ref: '#/components/schemas/Brand'
          nullable: true
        cc:
          type: string
          nullable: true
        from:
          type: string
          nullable: true
        html:
          type: string
          nullable: true
        reply_to:
          type: string
          nullable: true
        subject:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        tracking:
          $ref: '#/components/schemas/TrackingOverride'
      required:
        - tracking
    Attachment:
      title: Attachment
      type: object
      additionalProperties: true
    Brand:
      title: Brand
      type: object
      properties:
        snippets:
          $ref: '#/components/schemas/IBrandSnippets'
        settings:
          $ref: '#/components/schemas/IBrandSettings'
      required:
        - snippets
        - settings
    IBrandSettings:
      title: IBrandSettings
      type: object
      properties:
        colors:
          $ref: '#/components/schemas/IBrandColors'
          nullable: true
        email:
          $ref: '#/components/schemas/IBrandSettingsEmail'
          nullable: true
    MessageMetadata:
      title: MessageMetadata
      type: object
      properties:
        event:
          type: string
          nullable: true
          description: >-
            An arbitrary string to tracks the event that generated this request
            (e.g. 'signup').
        tags:
          type: array
          items:
            type: string
          nullable: true
          description: >-
            An array of up to 9 tags you wish to associate with this request
            (and corresponding messages) for later analysis. Individual tags
            cannot be more than 30 characters in length.
        utm:
          $ref: '#/components/schemas/UTM'
          nullable: true
          description: >-
            Identify the campaign that refers traffic to a specific website, and
            attributes the browser's website session.
        trace_id:
          type: string
          nullable: true
          description: >-
            A unique ID used to correlate this request to processing on your
            servers. Note: Courier does not verify the uniqueness of this ID.
    UTM:
      title: UTM
      type: object
      properties:
        source:
          type: string
          nullable: true
        medium:
          type: string
          nullable: true
        campaign:
          type: string
          nullable: true
        term:
          type: string
          nullable: true
        content:
          type: string
          nullable: true
    TrackingOverride:
      title: TrackingOverride
      type: object
      properties:
        open:
          type: boolean
      required:
        - open
    Content:
      title: Content
      oneOf:
        - $ref: '#/components/schemas/ElementalContent'
        - $ref: '#/components/schemas/ElementalContentSugar'
    ElementalContent:
      title: ElementalContent
      type: object
      properties:
        version:
          type: string
          description: For example, "2022-01-01"
        brand:
          nullable: true
        elements:
          type: array
          items:
            $ref: '#/components/schemas/ElementalNode'
      required:
        - version
        - elements
    ElementalNode:
      title: ElementalNode
      oneOf:
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - text
            - $ref: '#/components/schemas/ElementalTextNode'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - meta
            - $ref: '#/components/schemas/ElementalMetaNode'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - channel
            - $ref: '#/components/schemas/ElementalChannelNode'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - image
            - $ref: '#/components/schemas/ElementalImageNode'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - action
            - $ref: '#/components/schemas/ElementalActionNode'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - divider
            - $ref: '#/components/schemas/ElementalDividerNode'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - group
            - $ref: '#/components/schemas/ElementalGroupNode'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - quote
            - $ref: '#/components/schemas/ElementalQuoteNode'
          required:
            - type
    ElementalContentSugar:
      title: ElementalContentSugar
      type: object
      description: Syntatic Sugar to provide a fast shorthand for Courier Elemental Blocks.
      properties:
        title:
          type: string
          description: >-
            The title to be displayed by supported channels i.e. push, email (as
            subject)
        body:
          type: string
          description: The text content displayed in the notification.
      required:
        - title
        - body
    ElementalActionNode:
      title: ElementalActionNode
      type: object
      description: Allows the user to execute an action. Can be a button or a link.
      properties:
        content:
          type: string
          description: The text content of the action shown to the user.
        href:
          type: string
          description: The target URL of the action.
        action_id:
          type: string
          nullable: true
          description: A unique id used to identify the action when it is executed.
        align:
          $ref: '#/components/schemas/IAlignment'
          nullable: true
          description: The alignment of the action button. Defaults to "center".
        background_color:
          type: string
          nullable: true
          description: The background color of the action button.
        style:
          $ref: '#/components/schemas/IActionButtonStyle'
          nullable: true
          description: Defaults to `button`.
        locales:
          $ref: '#/components/schemas/Locales'
          description: >-
            Region specific content. See [locales
            docs](https://www.courier.com/docs/platform/content/elemental/locales/)
            for more details.
      required:
        - content
        - href
        - locales
      allOf:
        - $ref: '#/components/schemas/ElementalBaseNode'
    Locales:
      title: Locales
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Locale'
      nullable: true
    Locale:
      title: Locale
      type: object
      properties:
        content:
          type: string
      required:
        - content
    IActionButtonStyle:
      title: IActionButtonStyle
      type: string
      enum:
        - button
        - link
    IAlignment:
      title: IAlignment
      type: string
      enum:
        - center
        - left
        - right
        - full
    ElementalDividerNode:
      title: ElementalDividerNode
      type: object
      description: Renders a dividing line between elements.
      properties:
        color:
          type: string
          nullable: true
          description: The CSS color to render the line with. For example, `#fff`
      allOf:
        - $ref: '#/components/schemas/ElementalBaseNode'
    ElementalGroupNode:
      title: ElementalGroupNode
      type: object
      description: >-
        Allows you to group elements together. This can be useful when used in
        combination with "if" or "loop". See [control flow
        docs](https://www.courier.com/docs/platform/content/elemental/control-flow/)
        for more details.
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/ElementalNode'
          description: Sub elements to render.
      required:
        - elements
      allOf:
        - $ref: '#/components/schemas/ElementalBaseNode'
    ElementalChannelNode:
      title: ElementalChannelNode
      type: object
      description: >
        The channel element allows a notification to be customized based on
        which channel it is sent through. 

        For example, you may want to display a detailed message when the
        notification is sent through email, 

        and a more concise message in a push notification. Channel elements are
        only valid as top-level 

        elements; you cannot nest channel elements. If there is a channel
        element specified at the top-level 

        of the document, all sibling elements must be channel elements.


        Note: As an alternative, most elements support a `channel` property.
        Which allows you to selectively 

        display an individual element on a per channel basis. See the 

        [control flow
        docs](https://www.courier.com/docs/platform/content/elemental/control-flow/)
        for more details.
      properties:
        channel:
          type: string
          description: >
            The channel the contents of this element should be applied to. Can
            be `email`,

            `push`, `direct_message`, `sms` or a provider such as slack
        elements:
          type: array
          items:
            $ref: '#/components/schemas/ElementalNode'
          nullable: true
          description: |
            An array of elements to apply to the channel. If `raw` has not been 
            specified, `elements` is `required`.
        raw:
          type: object
          additionalProperties: true
          nullable: true
          description: |
            Raw data to apply to the channel. If `elements` has not been
            specified, `raw` is `required`.
      required:
        - channel
      allOf:
        - $ref: '#/components/schemas/ElementalBaseNode'
    ElementalTextNode:
      title: ElementalTextNode
      type: object
      description: Represents a body of text to be rendered inside of the notification.
      properties:
        content:
          type: string
          description: |
            The text content displayed in the notification. Either this
            field must be specified, or the elements field
        align:
          $ref: '#/components/schemas/TextAlign'
          description: Text alignment.
        text_style:
          $ref: '#/components/schemas/TextStyle'
          nullable: true
          description: Allows the text to be rendered as a heading level.
        color:
          type: string
          nullable: true
          description: Specifies the color of text. Can be any valid css color value
        bold:
          type: string
          nullable: true
          description: Apply bold to the text
        italic:
          type: string
          nullable: true
          description: Apply italics to the text
        strikethrough:
          type: string
          nullable: true
          description: Apply a strike through the text
        underline:
          type: string
          nullable: true
          description: Apply an underline to the text
        locales:
          $ref: '#/components/schemas/Locales'
          nullable: true
          description: >-
            Region specific content. See [locales
            docs](https://www.courier.com/docs/platform/content/elemental/locales/)
            for more details.
        format:
          type: string
          enum:
            - markdown
          nullable: true
      required:
        - content
        - align
      allOf:
        - $ref: '#/components/schemas/ElementalBaseNode'
    ElementalQuoteNode:
      title: ElementalQuoteNode
      type: object
      description: Renders a quote block.
      properties:
        content:
          type: string
          description: The text value of the quote.
        align:
          $ref: '#/components/schemas/IAlignment'
          nullable: true
          description: Alignment of the quote.
        borderColor:
          type: string
          nullable: true
          description: CSS border color property. For example, `#fff`
        text_style:
          $ref: '#/components/schemas/TextStyle'
        locales:
          $ref: '#/components/schemas/Locales'
          description: >-
            Region specific content. See [locales
            docs](https://www.courier.com/docs/platform/content/elemental/locales/)
            for more details.
      required:
        - content
        - text_style
        - locales
      allOf:
        - $ref: '#/components/schemas/ElementalBaseNode'
    TextStyle:
      title: TextStyle
      type: string
      enum:
        - text
        - h1
        - h2
        - subtext
    ElementalMetaNode:
      title: ElementalMetaNode
      type: object
      description: >
        The meta element contains information describing the notification that
        may 

        be used by a particular channel or provider. One important field is the
        title 

        field which will be used as the title for channels that support it.
      properties:
        title:
          type: string
          nullable: true
          description: >-
            The title to be displayed by supported channels. For example, the
            email subject.
      allOf:
        - $ref: '#/components/schemas/ElementalBaseNode'
    ElementalImageNode:
      title: ElementalImageNode
      type: object
      description: Used to embed an image into the notification.
      properties:
        src:
          type: string
          description: The source of the image.
        href:
          type: string
          nullable: true
          description: A URL to link to when the image is clicked.
        align:
          $ref: '#/components/schemas/IAlignment'
          nullable: true
          description: The alignment of the image.
        altText:
          type: string
          nullable: true
          description: Alternate text for the image.
        width:
          type: string
          nullable: true
          description: CSS width properties to apply to the image. For example, 50px
      required:
        - src
      allOf:
        - $ref: '#/components/schemas/ElementalBaseNode'
    ElementalBaseNode:
      title: ElementalBaseNode
      type: object
      properties:
        channels:
          type: array
          items:
            type: string
          nullable: true
        ref:
          type: string
          nullable: true
        if:
          type: string
          nullable: true
        loop:
          type: string
          nullable: true
    Preference:
      title: Preference
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PreferenceStatus'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
          nullable: true
        channel_preferences:
          type: array
          items:
            $ref: '#/components/schemas/ChannelPreference'
          nullable: true
        source:
          $ref: '#/components/schemas/ChannelSource'
          nullable: true
      required:
        - status
    RuleType:
      title: RuleType
      type: string
      enum:
        - snooze
        - channel_preferences
        - status
    ChannelSource:
      title: ChannelSource
      type: string
      enum:
        - subscription
        - list
        - recipient
    IPreferences:
      title: IPreferences
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Preference'
    IProfilePreferences:
      title: IProfilePreferences
      type: object
      properties:
        categories:
          $ref: '#/components/schemas/IPreferences'
          nullable: true
        notifications:
          $ref: '#/components/schemas/IPreferences'
        templateId:
          type: string
          nullable: true
      required:
        - notifications
    IBrandSnippet:
      title: IBrandSnippet
      type: object
      properties:
        format:
          type: string
          enum:
            - handlebars
        name:
          type: string
        value:
          type: string
      required:
        - format
        - name
        - value
    IBrandSnippets:
      title: IBrandSnippets
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/IBrandSnippet'
      required:
        - items
    IBrandTemplate:
      title: IBrandTemplate
      type: object
      properties:
        backgroundColor:
          type: string
          nullable: true
        blocksBackgroundColor:
          type: string
          nullable: true
        enabled:
          type: boolean
        footer:
          type: string
          nullable: true
        head:
          type: string
          nullable: true
        header:
          type: string
          nullable: true
        width:
          type: string
          nullable: true
      required:
        - enabled
    IBrandTemplateOverride:
      title: IBrandTemplateOverride
      type: object
      properties:
        mjml:
          $ref: '#/components/schemas/IBrandTemplate'
        footerBackgroundColor:
          type: string
          nullable: true
        footerFullWidth:
          type: boolean
          nullable: true
      required:
        - mjml
      allOf:
        - $ref: '#/components/schemas/IBrandTemplate'
    IBrandSettingsSocialPresence:
      title: IBrandSettingsSocialPresence
      type: object
      properties:
        inheritDefault:
          type: boolean
          nullable: true
        facebook:
          $ref: '#/components/schemas/BaseSocialPresence'
          nullable: true
        instagram:
          $ref: '#/components/schemas/BaseSocialPresence'
          nullable: true
        linkedin:
          $ref: '#/components/schemas/BaseSocialPresence'
          nullable: true
        medium:
          $ref: '#/components/schemas/BaseSocialPresence'
          nullable: true
        twitter:
          $ref: '#/components/schemas/BaseSocialPresence'
          nullable: true
    BaseSocialPresence:
      title: BaseSocialPresence
      type: object
      properties:
        url:
          type: string
      required:
        - url
    IBrandSettingsEmail:
      title: IBrandSettingsEmail
      type: object
      properties:
        templateOverride:
          $ref: '#/components/schemas/IBrandTemplateOverride'
          nullable: true
        head:
          $ref: '#/components/schemas/EmailHead'
          nullable: true
        footer:
          $ref: '#/components/schemas/EmailFooter'
          nullable: true
        header:
          $ref: '#/components/schemas/EmailHeader'
          nullable: true
    EmailHead:
      title: EmailHead
      type: object
      properties:
        inheritDefault:
          type: boolean
        content:
          type: string
          nullable: true
      required:
        - inheritDefault
    EmailFooter:
      title: EmailFooter
      type: object
      properties:
        content:
          nullable: true
        inheritDefault:
          type: boolean
          nullable: true
    EmailHeader:
      title: EmailHeader
      type: object
      properties:
        inheritDefault:
          type: boolean
          nullable: true
        barColor:
          type: string
          nullable: true
        logo:
          $ref: '#/components/schemas/Logo'
      required:
        - logo
    Logo:
      title: Logo
      type: object
      properties:
        href:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
    IBrandSettingsInApp:
      title: IBrandSettingsInApp
      type: object
      properties:
        borderRadius:
          type: string
          nullable: true
        disableMessageIcon:
          type: boolean
          nullable: true
        fontFamily:
          type: string
          nullable: true
        placement:
          $ref: '#/components/schemas/InAppPlacement'
          nullable: true
        widgetBackground:
          $ref: '#/components/schemas/WidgetBackground'
        colors:
          $ref: '#/components/schemas/IBrandColors'
        icons:
          $ref: '#/components/schemas/Icons'
        preferences:
          $ref: '#/components/schemas/Preferences'
      required:
        - widgetBackground
        - colors
        - icons
        - preferences
    InAppPlacement:
      title: InAppPlacement
      type: string
      enum:
        - top
        - bottom
        - left
        - right
    TextAlign:
      title: TextAlign
      type: string
      enum:
        - left
        - center
        - right
    WidgetBackground:
      title: WidgetBackground
      type: object
      properties:
        topColor:
          type: string
          nullable: true
        bottomColor:
          type: string
          nullable: true
    Icons:
      title: Icons
      type: object
      properties:
        bell:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
    Preferences:
      title: Preferences
      type: object
      properties:
        templateIds:
          type: array
          items:
            type: string
      required:
        - templateIds
    RoutingStrategyProvider:
      title: RoutingStrategyProvider
      type: object
      properties:
        name:
          type: string
        config:
          type: object
          additionalProperties: true
          nullable: true
        if:
          type: string
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
        - name
        - metadata
    Metadata:
      title: Metadata
      type: object
      properties:
        utm:
          $ref: '#/components/schemas/UTM'
          nullable: true
    RoutingStrategyChannel:
      title: RoutingStrategyChannel
      type: object
      properties:
        channel:
          type: string
        config:
          type: object
          additionalProperties: true
          nullable: true
        method:
          $ref: '#/components/schemas/RoutingMethod'
          nullable: true
        providers:
          $ref: '#/components/schemas/MessageProviders'
          nullable: true
        if:
          type: string
          nullable: true
      required:
        - channel
    MessageProviders:
      title: MessageProviders
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MessageProvidersType'
    MessageProvidersType:
      title: MessageProvidersType
      type: object
      properties:
        override:
          type: object
          additionalProperties: true
          nullable: true
          description: Provider specific overrides.
        if:
          type: string
          nullable: true
          description: >
            A JavaScript conditional expression to determine if the message
            should be sent 

            through the channel. Has access to the data and profile object. For
            example, 

            `data.name === profile.name`
        timeouts:
          type: integer
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
          nullable: true
    RoutingChannel:
      title: RoutingChannel
      oneOf:
        - $ref: '#/components/schemas/RoutingStrategyChannel'
        - $ref: '#/components/schemas/RoutingStrategyProvider'
        - type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://api.courier.com
    description: Production
